from math import degrees
from tkinter import Label
from turtle import dot
import matplotlib.pyplot as plt
import pandas as pd
from mpl_toolkits.mplot3d import Axes3D
import numpy as np
from matplotlib import animation
import sys
sys.path.insert(0, '')
from src.load import read_graph
'''
This file takes as input a .csv file generated by the graph_influence.py 
script and produces a plot in three dimensions showing the relationship/correlation between the three objective functions.

'''

def get_PF(myArray):
    myArray = myArray[myArray[:,0].argsort()]
    # Add first row to pareto_frontier
    pareto_frontier = myArray[0:1,:]
    # Test next row against the last row in pareto_frontier
    for row in myArray[1:,:]:
        if sum([row[x] >= pareto_frontier[-1][x]
                for x in range(len(row))]) == len(row):
            # If it is better on all features add the row to pareto_frontier
            pareto_frontier = np.concatenate((pareto_frontier, [row]))
    return pareto_frontier

def get_values(filename):
    df = pd.read_csv(filename, sep=",")
    x=  df["n_nodes"].to_list()
    z = df["influence"].to_list()
    z, x = zip(*sorted(zip(z, x)))

    return z,x
if __name__ == '__main__':
    
    #graphs = ['deezerEU', 'pgp', 'fb_politician','fb-pages-public-figure', 'facebook_combined', 'fb_org']
    #models = ['IC', 'WC']
    graphs = ['facebook_combined',  'fb_politician', 'fb_org', 'fb-pages-public-figure', 'pgp','deezerEU']
    models = ['IC', 'WC']
    for idx, name in enumerate(graphs):
        fig,((ax1, ax3), (ax2, ax4)) = plt.subplots(2,2, figsize=(9,7), sharey=True, sharex=False)

        for model in models:
            print(name, model, '-----')
            print(name, model, '-----')
            filename = 'experiments/{0}_8-{1}/run-{2}.csv'.format(name, model, 1)
            a ,b = get_values(filename)
            t8 = np.array([[b[i],a[i]] for i in range(len(b))])

            filename = 'experiments/{0}_4-{1}/run-{2}.csv'.format(name, model, 1)
            a ,b = get_values(filename)
            t4 = np.array([[b[i],a[i]] for i in range(len(b))])


            filename = 'experiments/{0}_2-{1}/run-{2}.csv'.format(name, model, 1)
            a ,b = get_values(filename)
            t2 = np.array([[b[i],a[i]] for i in range(len(b))])
            
            filename = 'experiments/{0}-{1}/run-{2}.csv'.format(name, model, 1)
            a ,b = get_values(filename)
            t = np.array([[b[i],a[i]] for i in range(len(b))])


            from scipy.spatial.distance import directed_hausdorff
            import similaritymeasures
            df = similaritymeasures.frechet_dist(t, t8)

            # area = similaritymeasures.area_between_two_curves(t, t8)

            # # quantify the difference between the two curves using
            # # Curve Length based similarity measure
            # cl = similaritymeasures.curve_length_measure(t, t8)

            # # quantify the difference between the two curves using
            # # Dynamic Time Warping distance

            # print(df, area, cl, pcm, d)
            # print the results

            from fastdtw import fastdtw
            scale = [8,4,2]
            diff = [fastdtw(t[:,0],t8[:,0])[0],fastdtw(t[:,0],t4[:,0])[0],fastdtw(t[:,0],t2[:,0])[0]]
            #diff = [pcm8, pcm4, pcm2]
            df = pd.DataFrame()
            df["scale"] = scale
            df["diff"] = [float(x) for x in diff]
            df.to_csv('coef/{0}-{1}'.format(name, model),index=False)     

            from scipy.spatial.distance import euclidean

            x = t[:,1]
            y = t2[:,1]
            x = (x - np.min(x)) / (np.max(x) - np.min(x))
            y = (y - np.min(y)) / (np.max(y) - np.min(y))
            print(x)
            print(y)
            dtw_distance, warp_path = fastdtw(x, y, dist=euclidean)

            filename = '{0}_{1}_8-page_rank.csv'.format(name, model)
            a ,b = get_values(filename)
            m8 = np.array([[b[i],a[i]] for i in range(len(b))])
            print(len(m8))
            m8 = get_PF(m8)

            print(len(m8))
            filename = '{0}_{1}_4-page_rank.csv'.format(name, model)
            a ,b = get_values(filename)
            m4 = np.array([[b[i],a[i]] for i in range(len(b))])

            print(len(m4))
            m4 = get_PF(m4)

            print(len(m4))

            filename = '{0}_{1}_2-page_rank.csv'.format(name, model)
            a ,b = get_values(filename)
            m2 = np.array([[b[i],a[i]] for i in range(len(b))])
            
            m4 = get_PF(m4)
            '''
            matrix = []
            for item in t:
                appo = []
                for item2 in t8:
                    unit_vector_1 = item / np.linalg.norm(item)
                    unit_vector_2 = item2 / np.linalg.norm(item2)
                    dot_product = np.dot(item, item2)
                    print(dot_product)
                    angle = np.arccos(dot_product)
                    print(angle)
                    exit(0)
                    if angle > np.pi/2:
                        appo.append(0)
                        print('x')
                    else: 
                        appo.append(np.cos(angle))
                matrix.append(appo)
            print(len(t) * len(t8), len(matrix) * len(matrix[0]))
            #0.9997374639500645
            mean = []
            mean = [np.mean(item) for item in matrix]
            print(np.mean(mean))
            for item in matrix:
                #print(np.mean(item))
                import math
                if math.isnan(np.mean(item)):
                    print('male')
                    print(item)
#max{AMSS(Qn−1, Cm−1) + 2sim(qn, cm), 
# AMSS(Qn−2, Cm−1)+2sim(qn−1, cm)+sim(qn, cm), 
# AMSS(Qn−1, Cm−2)+2sim(qn, cm−1)+sim(qn, cm)}
'''
           ## AXES 1 

            if model == 'IC':
                list_leg  = []
                leg = ax1.scatter(t[:,1],t[:,0],color="red",label='Original')
                list_leg.append(leg)
                leg = ax1.scatter(t2[:,1],t2[:,0],color="orange",label='s=2')
                list_leg.append(leg)
    
                leg = ax1.scatter(t4[:,1],t4[:,0],color="blue",label='s=4')
                list_leg.append(leg)

                leg = ax1.scatter(t8[:,1],t8[:,0],color="green",label='s=8')
                list_leg.append(leg)


                ax1.set_xlabel('% Influenced Nodes',fontsize=12)
                
                ax2.set_xlabel('% Influenced Nodes',fontsize=12)

                ax1.set_ylabel('% Nodes as seed set',fontsize=12)
                ax2.set_ylabel('% Nodes as seed set',fontsize=12)

                ax1.set_ylim(0,2.5)
                #ax1.set_title('MOEA', x=0.07, y=0.9,fontsize=12)

                ## AXES 2

                ax2.scatter(t[:,1],t[:,0],color="red",label='Original')
                ax2.scatter(m2[:,1],m2[:,0],color="orange",label='$\it{s}$=2')
                ax2.scatter(m4[:,1],m4[:,0],color="blue",label='$\it{s}$=4')
                ax2.scatter(m8[:,1],m8[:,0],color="green",label='$\it{s}$=8')
                #ax2.set_title('Mapping', x=0.1, y=0.9,fontsize=12)
                ax1.set_xlim(0,max((t[:,1])+0.15*max((t[:,1]))))
                ax2.set_xlim(0,max((t[:,1])+0.15*max((t[:,1]))))
                ax1.set_xticklabels([])
                ax2.xaxis.get_label().set_fontsize(12)
                ax2.yaxis.get_label().set_fontsize(12)
                ax1.legend(fontsize=12)
                #ax1.text(max((t[:,1]))/2,2.6,'IC Model', fontsize=12)
            else:
                ax3.scatter(t[:,1],t[:,0],color="red",label='Original')

                ax3.scatter(t2[:,1],t2[:,0],color="orange",label='s=2')
    
                ax3.scatter(t4[:,1],t4[:,0],color="blue",label='s=4')

                ax3.scatter(t8[:,1],t8[:,0],color="green",label='s=8')
             
                ax4.set_xlabel('% Influenced Nodes',fontsize=12)

                ax3.set_ylim(0,2.9)
                #ax3.set_title('MOEA', x=0.07, y=0.9,fontsize=12)
                ## AXES 2
                ax3.set_xticklabels([])
                ax4.scatter(t[:,1],t[:,0],color="red",label='Original')
                ax4.scatter(m2[:,1],m2[:,0],color="orange",label='2 map')
                ax4.scatter(m4[:,1],m4[:,0],color="blue",label='4 map')
                ax4.scatter(m8[:,1],m8[:,0],color="green",label='8 map')
                #ax4.set_title('Mapping', x=0.1, y=0.9,fontsize=12)
                #ax4.set_title('Mapping', x=1.05, y=0.4,fontsize=12, rotation=90)

                ax3.set_xlim(0,max((t[:,1])+0.15*max((t[:,1]))))
                ax4.set_xlim(0,max((t[:,1])+0.15*max((t[:,1]))))

                ax3.xaxis.get_label().set_fontsize(12)
                ax3.yaxis.get_label().set_fontsize(12)

                ax3.xaxis.get_label().set_fontsize(12)
                ax3.yaxis.get_label().set_fontsize(12)
                #ax3.text(max((t[:,1]))/2,2.6,'WC Model', fontsize=12)

            #plt.legend()
        plt.subplots_adjust(left=0.07,
        bottom=0.08, 
        right=0.99, 
        top=0.99, 
        wspace=0., 
        hspace=0.0)

        #fig.suptitle('IC', fontsize=12)
        plt.savefig('PF/{0}.eps'.format(name), format='eps')
        plt.savefig('PF/{0}.png'.format(name), format='png')

        plt.show()

           
        