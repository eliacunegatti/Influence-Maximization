import matplotlib.pyplot as plt
import pandas as pd
from mpl_toolkits.mplot3d import Axes3D
import numpy as np
from matplotlib import animation
import sys
sys.path.insert(0, '')
from src.load import read_graph
'''
This file takes as input a .csv file generated by the graph_influence.py 
script and produces a plot in three dimensions showing the relationship/correlation between the three objective functions.


'''

if __name__ == '__main__':
    
    filename = "facebook_combined_example4-k25-p0.05-IC-degree.csv"  
    graph = "scale_graphs/facebook_combined.txt_example4.txt"

    G = read_graph(graph)
    N = G.number_of_nodes()
    my_degree_function = G.degree   
    mean = []
    for item in G:
        mean.append(my_degree_function[item])

    print(np.mean(mean))
    df = pd.read_csv(filename, sep=",")

    x0= df["n_nodes"].to_list()
    y0 = df["time"].to_list()
    z0 = df["influence"].to_list()

    for i in range(len(z0)):
        z0[i] = (z0[i]/N) * 100
        x0[i] = (x0[i]/N) * 100
    


    filename = "facebook_combined_example4-k25-p0.2-IC-degree.csv"  
    graph = "scale_graphs/facebook_combined.txt_example4.txt"

    G = read_graph(graph)
    N = G.number_of_nodes()
    my_degree_function = G.degree   
    mean = []
    for item in G:
        mean.append(my_degree_function[item])

    print(np.mean(mean))
    df = pd.read_csv(filename, sep=",")

    x1= df["n_nodes"]
    y1 = df["time"]
    z1 = df["influence"]

    for i in range(len(z1)):
        z1[i] = (z1[i]/N) * 100
        x1[i] = (x1[i]/N) * 100
    




    filename = "experiments/facebook_combined-k100-p0.05-IC-communities.csv"  
    graph = "graphs/facebook_combined.txt"

    G = read_graph(graph)
    N = G.number_of_nodes()
    my_degree_function = G.degree   
    mean = []
    for item in G:
        mean.append(my_degree_function[item])

    print(np.mean(mean))

    df = pd.read_csv(filename, sep=",")

    x2= df["n_nodes"]
    y2 = df["time"]
    z2 = df["influence"]

    for i in range(len(z2)):
        z2[i] = (z2[i]/N) * 100
        x2[i] = (x2[i]/N) * 100
    
    fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(8,3))
    fig.suptitle("IC", size=16)

    ax1.scatter(z2,x2)
    ax1.xaxis.set_ticks(np.arange(0,max(z2), 5))
    ax1.yaxis.set_ticks(np.arange(0, max(x2), 0.5))
    ax1.set_ylabel("Nodes")

    ax1.set_xlabel("Influence")
    fig.suptitle("IC", size=16)
    
    ax2.scatter(y2,z2)
    ax2.yaxis.set_ticks(np.arange(0,max(z2), 5))
    ax2.xaxis.set_ticks(np.arange(0, max(y2)+1, 1))
    ax2.set_ylabel("Nodes")
    ax3.scatter(y2,x2)
    ax3.xaxis.set_ticks(np.arange(0,max(y2)+1, 1))
    ax3.yaxis.set_ticks(np.arange(0, max(x2), 0.5))
    ax3.set_ylabel("Nodes")

    ax3.set_xlabel("Influence")
    ax2.set_xlabel("Influence")
    # ax2.scatter(y1, z1)
    # ax2.xaxis.set_ticks(np.arange(0, df["time"].max()+1, 1))
    # ax2.yaxis.set_ticks(np.arange(0,df["influence"].max()+250, 250))
    # ax2.set_xlabel("No Communities")

    # ax2.set_ylabel("Influence")
    
    # ax3.scatter(y1,x1)
    # ax3.yaxis.set_ticks(np.arange(0, df["n_nodes"].max()+1, 10))
    # ax3.xaxis.set_ticks(np.arange(0,df["time"].max()+1, 1))
    # ax3.set_xlabel("No Communities")

    # ax3.set_ylabel("Nodes")

    ax1.set_box_aspect(1)
    ax2.set_box_aspect(1)
    ax3.set_box_aspect(1)
    fig.tight_layout()
    #uncomment to save the plot in .png format
    #fn = str(os.path.basename(filename))
    #fn = fn.replace(".csv", "")
    #plt.savefig('gif/{}.png'.format(fn))
    plt.show()
    plt.cla()

    plt.scatter(z0,x0,color="blue", label="scale 50% p=0.05")
    plt.scatter(z1,x1,color="orange",label="scale 50% p=0.1")
    plt.scatter(z2,x2,color="red",label="original Facebook p=0.05")
    plt.xlabel('% Influenced Nodes')
    plt.ylabel('% Nodes as seed set')
    plt.legend()
    plt.show()

    exit(0)

    