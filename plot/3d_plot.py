import matplotlib.pyplot as plt
import pandas as pd
from mpl_toolkits.mplot3d import Axes3D
import numpy as np
import matplotlib
import os
from matplotlib import animation
'''
This file takes as input a .csv file generated by the graph_influence.py 
script and produces a plot in three dimensions showing the relationship/correlation between the three objective functions.


'''
#------------------------------------------------------#

#functions to save gif and mp4 format
def init():

    #surf = ax.plot_trisurf(x1,y1,z1, cmap='viridis_r', linewidth=0,alpha = 0.99, edgecolor = 'k', norm=norm)
    #fig.colorbar(surf, shrink=0.5, aspect=5)
    return fig,

def animate(i):
    # azimuth angle : 0 deg to 360 deg
    ax.view_init(elev=10, azim=i*4)
    return fig,

# Animate
def save_video():
    ani = animation.FuncAnimation(fig, animate, init_func=init,
                                frames=90, interval=50, blit=True)

    fn = str(os.path.basename(filename))
    fn = fn.replace(".csv", "")
    #ani.save(fn+'.mp4',writer='ffmpeg',fps=1000/50)
    ani.save('gif/'+fn+'.gif',writer='imagemagick',fps=1000/50)

#------------------------------------------------------#

if __name__ == '__main__':
    
    filename = "/Users/elia/Desktop/Influence-Maximization/graph_facebook_combined_scale_4-k20-p0.4-WC.csv.csv"

    df = pd.read_csv(filename, sep=",")

    fig = plt.figure(figsize=(8,8))
    ax = fig.add_subplot(111, projection='3d')


    x1= df["n_nodes"]
    y1 = df["time"]
    z1 = df["influence"]

    ax.scatter(x1,y1,z1, alpha=1, color="red")

    ax.xaxis.set_ticks(np.arange(0, df["n_nodes"].max()+1, 1))
    ax.yaxis.set_ticks(np.arange(0,df["time"].max()+1, 1))
    ax.zaxis.set_ticks(np.arange(0, df["influence"].max()+1, 100))

    ax.set_xlabel("Nodes")

    ax.set_zlabel("Influence")

    ax.set_ylabel("Converge Time")


    #uncomment to save the plot in .png format
    #fn = str(os.path.basename(filename))
    #fn = fn.replace(".csv", "")
    #plt.savefig('gif/{}.png'.format(fn))

    plt.show()

    #uncomment to save the plot in .gif  and .mp4 format
    #save_video()